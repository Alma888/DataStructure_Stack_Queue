队列
1、概念：只允许在一端进行插入数据操作，在另一端进行删除数据操作的特
                殊线性表，队列具有先进先出FIFO(First In First Out) 入队列：进行
                插入操作的一端称为队尾 出队列：进行删除操作的一端称为队头。
2、出入队列规则
     先进先出  First  In  First  Out（FIFO）
     双端队列  可以在任意两头进出

3、基本操作
         （顺序表不容易实现队列，通常使用链表实现）
        链表实现队列的基本操作：
//代码演示：
//单链表实现队列（利用链表的头删，尾插实现队列）
       class Node{
           int val;
           Node next;
           Node(int val,Node next){
               this.val=val;
               this.next=next;
           }
           Node(int val){
               this(0,null);
           }
       }
       public class Queue{
           private Node front = null; //链表的第一个结点
           private Node rear = null;  //链表的最后一个结点
           private int size = 0;      //队列中的所有元素个数

           //只有保证链表“尾插头删”   才符合队列的进出原则
           //尾插
           public void push(int val){
               Node node=new Node(val);
               if(front==null){
                   front=node;
               }else{
                   rear.next=node;
               }
               rear=node;
               size++;
           }

           //头删
           public void pop(){
               if(size<=0){
                   System.out.println("队列为空！");
                   return;
               }
               if(front!=null){
                   front=front.next;
                   rear=null;
               }
               size--;
           }
           //返回队首元素
           public int front(){
               if(size<=0){
                   System.out.println("队列为空！");
                   return -1;
               }
               return front.val;
           }
           //返回队尾元素
           public int rear(){
               if(size<=0){
                   System.out.println("队列为空！");
                   return -1;
               }
               return rear.val;
           }
           //返回队内元素个数
           public int size(){
               return size;
           }
           //返回队列是否为空
           public boolean isEmpty(){
               return size==0;
           }
       }


4、环形队列：
      扩展了解一下，实际中我们有时还会使用一种队列叫循环队列。如操作系统课程讲解生产者
      消费者模型时可以就会使用循环队列。环形队列可以使用数组实现，也可以使用循环链表实
      现。

5、队列的应用：
   （1）队列实现栈

//题目描述：使用队列实现栈的下列操作：
//         push(x) -- 元素 x 入栈
//         pop() -- 移除栈顶元素
//         top() -- 获取栈顶元素
//         empty() -- 返回栈是否为空
//注意:
//你只能使用队列的基本操作-- 也就是 push to back, peek/pop from front, size,和 is empty 这些操作是合法的。
//你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟
// 一个队列 , 只要是标准的队列操作即可。
//你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。

import java.util.LinkedList;
import java.util.Queue;

public class QueueToStack {
        Queue<Integer> queue;
        /** Initialize your data structure here. */
        public QueueToStack() {
            queue=new LinkedList<>();
        }

        /** Push element x onto stack. */
        public void push(int x) {
            queue.add(x);

        }

        /** Removes the element on top of the stack and returns that element. */
        public int pop() {
            for(int i=0;i<queue.size()-1;i++){
                queue.add(queue.poll());
            }
            return queue.poll();
        }

        /** Get the top element. */
        public int top() {
            for(int i=0;i<queue.size()-1;i++){
                queue.add(queue.poll());
            }
            int q=queue.poll();
            queue.add(q);
            return q;
        }

        /** Returns whether the stack is empty. */
        public boolean empty() {
            return queue.isEmpty();
        }
}


  （2）设计循环队列——两种解法：数组实现+单链表实现
题目描述：设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于
          FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称
          为“环形缓冲器”。

循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。

你的实现应该支持如下操作：
MyCircularQueue(k): 构造器，设置队列长度为 k 。
Front: 从队首获取元素。如果队列为空，返回 -1 。
Rear: 获取队尾元素。如果队列为空，返回 -1 。
enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。
deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。
isEmpty(): 检查循环队列是否为空。
isFull(): 检查循环队列是否已满。

示例：
MyCircularQueue circularQueue = new MyCircularQueue(3); // 设置长度为 3
circularQueue.enQueue(1);  // 返回 true
circularQueue.enQueue(2);  // 返回 true
circularQueue.enQueue(3);  // 返回 true
circularQueue.enQueue(4);  // 返回 false，队列已满
circularQueue.Rear();  // 返回 3
circularQueue.isFull();  // 返回 true
circularQueue.deQueue();  // 返回 true
circularQueue.enQueue(4);  // 返回 true
circularQueue.Rear();  // 返回 4
package Queue;

//本题给了两种解法：数组+单链表实现
//时间复杂度O(1)  空间复杂度O(n)
public class MyCircularQueue_622 {
    //解法一：数组实现
    private int[] array;
    private int size;
    private int front;
    private int rear;
        /** Initialize your data structure here. Set the size of the queue to be k. */
        public MyCircularQueue_622(int k) {
            array=new int[k];
            size=0;
            front=0;
            rear=0;
        }

        //入队
        /** Insert an element into the circular queue. Return true if the operation is successful. */
        public boolean enQueue(int value) {
            if(size==array.length){
                return false;
            }
            array[rear]=value;
            rear=(rear+1)%array.length;
            size++;
            return true;
        }

        //出队
        /** Delete an element from the circular queue. Return true if the operation is successful. */
        public boolean deQueue() {
            if(size==0){
                return false;
            }
            front=(front+1)%array.length;
            size--;
            return true;
        }

        //获取队首元素
        /** Get the front item from the queue. */
        public int Front() {
            if(size==0){
                return -1;
            }
            return array[front];
        }

        //获取队尾元素
        /** Get the last item from the queue. */
        public int Rear() {
            if(size==0){
                return -1;
            }
            int index = (rear + array.length - 1) % array.length;
            return array[index];
        }

        //判空
        /** Checks whether the circular queue is empty or not. */
        public boolean isEmpty() {
            return size==0;
        }

        //判定队列是否是满的
        /** Checks whether the circular queue is full or not. */
        public boolean isFull() {
            return size==array.length;
        }
}

//解法二：单链表实现
/*
class Node {
  public int value;
  public Node nextNode;

  public Node(int value) {
    this.value = value;
    this.nextNode = null;
  }
}

class MyCircularQueue_622 {

  private Node head, tail;
  private int count;
  private int capacity;


public MyCircularQueue_622(int k) {
    this.capacity = k;
}

    public boolean enQueue(int value) {
        if (this.count == this.capacity) {
            return false;
        }

        Node newNode = new Node(value);
        if (this.count == 0) {
            head = tail = newNode;
        } else {
            tail.nextNode = newNode;
            tail = newNode;
        }
        this.count += 1;
        return true;
    }

    public boolean deQueue() {
        if (this.count == 0) {
            return false;
        }
        this.head = this.head.nextNode;
        this.count -= 1;
        return true;
    }

    public int Front() {
        if (this.count == 0) {
            return -1;
        } else {
            return this.head.value;
        }
    }

    public int Rear() {
        if (this.count == 0) {
            return -1;
        }else {
            return this.tail.value;
        }
    }

    public boolean isEmpty() {
        return (this.count == 0);
    }

    public boolean isFull() {
        return (this.count == this.capacity);
    }
}
*/

